# inspired from https://towardsdatascience.com/face-mask-detection-using-darknets-yolov3-84cde488e5a1
import glob
import xml.etree.ElementTree as ET
from tqdm import tqdm


def convert(size, box):
    """Takes as input:  (width, height) of an image
                        (xmin, ymin, xmax, ymax) of the bounding box
       and returns (x, y, w, h) of the bounding box in yolo format.
    """
    dw = 1 / size[0]
    dh = 1 / size[1]
    x = (box[0] + box[2]) / 2
    y = (box[1] + box[3]) / 2
    w = abs(box[0] - box[2])
    h = abs(box[1] - box[3])
    return x * dw, y * dh, w * dw, h * dh


def xml_to_txt(input_path, output_path):
    """Iterates through all .xml files (generated by labelImg) in the given directory,
    and generates .txt files that comply with yolo format for each .xml file.
    """
    progress_bar = tqdm(glob.glob(input_path + '/*.xml'))
    for xml_file in progress_bar:
        root = ET.parse(xml_file).getroot()
        txt_list = []
        for member in root.findall("object"):
            f_name = root.find("filename").text
            width, height = int(root.find('size')[0].text), int(root.find("size")[1].text)
            c = member[0].text

            b = float(member[5][0].text), float(member[5][1].text), float(member[5][2].text), float(member[5][3].text)
            bb = convert((width, height), b)
            class_map = "0 " if c == "with_mask" else "1 "
            txt_list.append(class_map + " ".join([str(l) for l in bb]) + "\n")
        output_file_name = f_name.split('.')[0] + ".txt"
        progress_bar.set_description("Converting " + output_file_name)
        with open(output_path + "/" + output_file_name, "w") as writer:
            for obj in txt_list:
                writer.write(obj)
    print("all complete!")
